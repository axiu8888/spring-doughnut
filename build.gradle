ext {

//  springbootVersion = "3.1.5"
//  springDependencyManagementVersion = "1.1.3"
//  springIntegrationVersion = "6.1.4"
  springbootVersion = "2.7.17"
  springDependencyManagementVersion = "1.0.15.RELEASE"
  springIntegrationVersion = "5.5.19"

  lombokVersion = "1.18.30"
  jacksonVersion = "2.15.3"
  guavaVersion = '32.1.3-jre'
  fastjson2Version = '2.0.42'
  commonsIOVersion = "2.15.0"
  commonsLang3Version = "3.13.0"
  slf4jVersion = '2.0.9'
  hutoolVersion = '5.8.23'

  aspectjVersion = "1.9.20"
  swaggerVersion = "3.0.0"
  knife4jVersion = "4.3.0"
  jjwtVersion = "0.12.3"
  nettyAllVersion = '4.1.101.Final'
  vertxVersion = "4.4.6"

  rxJavaVersion = '2.2.21'
  okHttpVersion = '4.10.0'
  retrofitVersion = '2.9.0'

  mysqlVersion = "8.2.0"
  postgresqlVersion = "42.6.0"
  druidVersion = "1.2.20"
  mybatisPlusVersion = "3.5.4.1"
  pagehelperVersion = "2.0.0"

  try {
    def props = new Properties()
    props.load(new FileReader("${getRootDir()}/nexus.properties"))
    repoUrl = props["repoUrl"]
    repoUsername = props["repoUsername"]
    repoPassword = props["repoPassword"]
  } catch (e) {
    e.printStackTrace()
  }

}

subprojects {

  apply plugin: 'java'

  group = "com.benefitj.spring"
  version = "2.3.0-SNAPSHOT"

  ext {
    compatibilityVersion = JavaVersion.VERSION_15
    // 默认是spring环境
    springEnv = true
    springTest = true
    //scriptFile = "https://gitee.com/axiu8888/GradleBuild/raw/main/Java/base.gradle"
    scriptFile = "${getRootDir()}/buildSystem/base.gradle"

    groupId = "$group"
    artifactPrefix = ""
    artifactId = "${getProject().name}"
    versionId = "${version}"

    manifestAttributes = [
        "version"   : "$version",
        "build-date": "${new Date().format('yyyy-MM-dd')}",
        "author"    : "axiu8888",
        "home"      : "https://github.com/axiu8888/${rootProject.name}",
    ]
  }

  dependencies {
    def commons = project(":commons")
    //println("project ==>: ${project.name}")
    if (project != commons) {
      compileOnly(commons)
      testImplementation(commons)
    }

  }

  repositories {
    maven { url("https://maven.aliyun.com/repository/google") }
    maven { url("https://maven.aliyun.com/repository/central") }
    maven { url("https://maven.aliyun.com/repository/gradle-plugin") }
    maven { url("https://maven.aliyun.com/repository/public") }
    maven { url("https://maven.aliyun.com/repository/jcenter") }
    maven { url 'https://repo.spring.io/milestone' }
    maven { url 'https://repo.spring.io/release' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }

    try {
      maven {
        url = repoUrl
        allowInsecureProtocol = true
        credentials {
          username repoUsername
          password repoPassword
        }
      }
    } catch(Exception ignore) {}
  }

  afterEvaluate {
    try {
      if(project.ext.versionFlag) {
        def path = sourceSets.main.resources.srcDirs
            .stream()
            .filter({ it2 -> it2.getName().equalsIgnoreCase("resources") })
            .findFirst()
            .orElse(sourceSets.main.resources.srcDirs[0])
            .getAbsolutePath()
        def file = new File(path, "version.properties")
        file.text = "build.version=${version}" +
            "\nbuild.date=${new Date().format('yyyy-MM-dd HH:mm')}"
      }
    } catch (e) {
      //e.printStackTrace()
    }
  }
}
