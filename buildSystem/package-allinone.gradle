import java.util.concurrent.Callable

ext {
  pkgAllInOne = false
}

def rootDirPath = getRootDir().getAbsolutePath()

// 配置是否将代码打包到一个jar中
tryIgnore({ pkgAllInOne = Boolean.parseBoolean("$allInOne") })
// 配置是否将代码打包到一个jar中
tryIgnore({ println("allInOne ==>: $allInOne") })

jar {
  from {
    // compileClasspath、runtimeClasspath、testCompileClasspath、testRuntimeClasspath
    configurations.compileClasspath.collect {
      if (it.getAbsolutePath().startsWith(rootDirPath)) {
        println("jar ===>: ${it.getAbsolutePath().substring(rootDirPath.length())}, ${it.exists()}")
        if (it.exists()) {
          it.isDirectory() ? it : zipTree(it)
        }
      }
    }
  }
}

sourcesJar {
  // compileClasspath、runtimeClasspath、testCompileClasspath、testRuntimeClasspath
  configurations.compileClasspath.collect {
    if (it.getAbsolutePath().startsWith(rootDirPath)) {
      def path = it.getAbsolutePath()
      def project = findProject(getRootProject(), path)
      if (project != null) {
        println("jar ===>: ${it.getAbsolutePath().substring(rootDirPath.length())}, ${it.exists()}")
        from project.sourceSets.main.allSource
      }
    }
  }
}

artifacts {
  archives sourcesJar
}

/**
 * 查找项目
 *
 * @param root 根项目
 * @param path 查找项目的路径
 * @return 返回查找到的项目
 */
static Project findProject(Project root, String path) {
  for (def p : root.subprojects) {
    if (path.startsWith(p.getBuildDir().getAbsolutePath())) {
      return p
    } else {
      if (!p.subprojects.isEmpty()) {
        def project = findProject(p, path)
        if (project != null) {
          return project
        }
      }
    }
  }
  return null
}


static def tryIgnore(Callable<?> r) {
  try {
    return r.call()
  } catch (ignore) { /* ~ */
  }
}
