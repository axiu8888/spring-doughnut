import java.util.concurrent.Callable

subprojects {

  apply plugin: 'java'

  group = "com.benefitj.services"
  // 更新 groupId
  ext.groupId = "${group}"

  dependencies {
    [
        fileTree(dir: 'libs', include: ['*.jar']),
        fileTree(dir: 'libs/jar', include: ['*.jar'])
    ].forEach {
      implementation(it)
    }

    if(trying({project.ext.needParentDeps}, true)) {
      [
          project(":commons"),
          project(":aop"),
          project(":eventbus"),
          project(":spring"),
          //'org.springframework.boot:spring-boot-devtools',
      ].forEach {
        implementation(it) {
          exclude(module: "quartz")
          exclude group: "io.springfox", module: "springfox-boot-starter"
          exclude group: "com.github.xiaoymin", module: "knife4j-openapi2-spring-boot-starter"
        }
      }
    }
  }

}

static <T> boolean trying(Callable<T> call, T defaultValue = null) {
  T v = null
  try {
    v = call.call()
  } catch (Throwable ignored) {}
  return v == null ? defaultValue : v
}